version: "3"

networks:
  course-platform:
    external: true

services:
  
  nginx:
    image: nginx-proxy
    build:
      context: .
      dockerfile: nginx.Dockerfile
    container_name: nginx
    ports:
      - "80:80"
    networks:
      - course-platform

  seq:
    container_name: seq
    image: datalust/seq
    ports:
      - "50505:80"
    volumes:
      - /home/actions/masters/seq:/data
    environment:
      ACCEPT_EULA: "Y"
      SEQ_API_CANONICALURI: "https://birdegop.ru/logs"
    networks: 
      - course-platform
  
  prometheus:
    container_name: prometheus
    build:
      context: .
      dockerfile: Prometheus.Dockerfile
    user: root
    volumes:
      - /home/actions/course-platform/prometheus:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus/data'
      - '--web.config.file=/etc/prometheus/prometheus.web.yml'
    ports:
      - "55055:9090"
    networks:
      - course-platform
  
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    user: root
    volumes:
      - /home/actions/course-platform/grafana:/var/lib/grafana
    environment:
      GF_SERVER_ROOT_URL: http://localhost:3000
    ports:
      - "50555:3000"
    depends_on:
      - prometheus
    networks:
      - course-platform

  postgres:
    image: postgres
    container_name: postgres
    environment:
      # Don't worry, these are overriden by github runner
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "root"
    volumes:
      - /home/actions/course-platform/pg_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    ports:
      - "5432:5432"
    networks: 
      - course-platform
  
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    container_name: postgres-metrics-exporter
    environment:
      # Don't worry, these are overriden by github runner
      DATA_SOURCE_NAME: "postgresql://postgres:root@postgres:5432/?sslmode=disable"
    links:
      - postgres
      - prometheus
    networks:
      - course-platform
  
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    restart: unless-stopped
    networks:
      - course-platform

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    hostname: kafka
    environment:
      # kafka just loves not working. when I added OVERSEAS i had to debug 3 hours the "Leader not available" error in kafkacat.
      # i have just completely erased zookeeper volume and restarted it with kafka, and it magically worked
      # If ever you have a similar problem, 
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092,OUTSIDE://localhost:9093,OVERSEAS://kafka.birdegop.ru:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT,OVERSEAS:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9092,OUTSIDE://0.0.0.0:9093,OVERSEAS://0.0.0.0:9094
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    restart: unless-stopped
    volumes:
      - /home/actions/course-platform/kafka:/kafka
    ports:
      - "9094:9094"
    networks:
      - course-platform

  akhq:
    image: tchiotludo/akhq
    container_name: akhq
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            course-platform:
              properties:
                bootstrap.servers: "kafka:9092"
        micronaut:
          server:
            context-path: "/kafka"
    restart: unless-stopped
    networks:
      - course-platform
    depends_on:
      - kafka